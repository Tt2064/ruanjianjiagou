@app.route('/start_logging', methods=['POST'])
def start_logging():
    global stop_event, thread_pool
    stop_event.clear()
    sampling_period = float(request.json.get('sampling_period', 1))
    num_threads = int(request.json.get('num_threads', 1))
    for _ in range(num_threads):
        thread_pool.submit(generate_data)
    return jsonify({"status": "started"})

@app.route('/stop_logging', methods=['POST'])
def stop_logging():
    global stop_event
    stop_event.set()
    return jsonify({"status": "stopped"})

@app.route('/get_log', methods=['GET'])
def get_log():
    log_messages = []
    try:
        while True:
            log_messages.append(log_queue.get_nowait())
    except queue.Empty:
        pass
    return jsonify({"log": log_messages})

@app.route('/get_data', methods=['GET'])
def get_data():
    data = {
        'diastolic_pressures': diastolic_pressures,
        'systolic_pressures': systolic_pressures,
        'timestamps': timestamps,
        'statuses': statuses,
        'heart_rates': heart_rates,
        'heart_rate_statuses': heart_rate_statuses,
        'temperatures': temperatures,
        'temperature_statuses': temperature_statuses,
        'calories_burned': calories_burned
    }
    return jsonify(data)

@app.route('/clear_data', methods=['POST'])
def clear_data():
    global diastolic_pressures, systolic_pressures, timestamps, statuses, heart_rates, heart_rate_statuses, temperatures, temperature_statuses, calories_burned
    diastolic_pressures.clear()
    systolic_pressures.clear()
    timestamps.clear()
    statuses.clear()
    heart_rates.clear()
    heart_rate_statuses.clear()
    temperatures.clear()
    temperature_statuses.clear()
    calories_burned.clear()
    return jsonify({"status": "cleared"})

@app.route('/plot_data', methods=['GET'])
def plot_data():
    plt.figure(figsize=(10, 6))

    plt.rcParams['font.sans-serif'] = ['SimHei']  # 使用黑体
    plt.rcParams['axes.unicode_minus'] = False  # 解决负号显示问题

    colors = []
    for systolic, diastolic in zip(systolic_pressures, diastolic_pressures):
        if systolic >= 140 or diastolic >= 90:
            colors.append('red')  # 高血压
        elif systolic < 90 or diastolic < 60:
            colors.append('black')  # 低血压
        else:
            colors.append('blue')  # 正常血压
    plt.scatter(diastolic_pressures, systolic_pressures, c=colors, label='生成的数据点')
    
    # 绘制 y = 2/3x 的基准线
    x = range(0, 200)
    y = [2/3 * xi for xi in x]
    plt.plot(y, x, color='red', label='y = 2/3x')
    plt.xlabel('收缩压')
    plt.ylabel('舒张压')
    plt.title('血压数据点分布')
    plt.legend()
    plt.grid(True)

    # 将图像保存到内存中
    img = io.BytesIO()
    plt.savefig(img, format='png')
    img.seek(0)
    plt.close()

    # 将图像编码为 base64
    plot_url = base64.b64encode(img.getvalue()).decode('utf8')

    # 绘制心率数据
    plt.figure(figsize=(10, 6))
    plt.plot(timestamps, heart_rates, label='心率')
    plt.axhline(y=60, color='red', linestyle='--', label='正常心率下限')
    plt.axhline(y=100, color='red', linestyle='--', label='正常心率上限')
    plt.xlabel('时间')
    plt.ylabel('心率 (次/分钟)')
    plt.title('心率变化')
    plt.legend()
    plt.grid(True)

    # 将图像保存到内存中
    img = io.BytesIO()
    plt.savefig(img, format='png')
    img.seek(0)
    plt.close()

    # 将图像编码为 base64
    heart_rate_plot_url = base64.b64encode(img.getvalue()).decode('utf8')

    # 绘制体温数据
    plt.figure(figsize=(10, 6))
    plt.plot(timestamps, temperatures, label='体温')
    plt.axhline(y=36.1, color='red', linestyle='--', label='正常体温下限')
    plt.axhline(y=37.2, color='red', linestyle='--', label='正常体温上限')
    plt.xlabel('时间')
    plt.ylabel('体温 (°C)')
    plt.title('体温变化')
    plt.legend()
    plt.grid(True)

    # 将图像保存到内存中
    img = io.BytesIO()
    plt.savefig(img, format='png')
    img.seek(0)
    plt.close()

    # 将图像编码为 base64
    temperature_plot_url = base64.b64encode(img.getvalue()).decode('utf8')

    return jsonify({
        'plot_url': plot_url,
        'heart_rate_plot_url': heart_rate_plot_url,
        'temperature_plot_url': temperature_plot_url
    })

if __name__ == '__main__':
    app.run(debug=True)